import os
import sqlite3
from aiogram.types import FSInputFile, Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import Bot, F, Router
from keyboards import kb_replay
from .hendlers_state import GPTStateRequests
from html import escape
import openai
import difflib
import httpx

quiz_router = Router()

#–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
IMAGE_PATH = "resources/images/quiz.jpg"
PROMPT_FILE = "resources/prompts/quiz.txt"
DB_NAME = "quiz_results.db"

with open(PROMPT_FILE, "r", encoding="utf-8") as f:
    BASE_PROMPT = f.read().strip()

TOPICS = {
    "quiz_prog": ("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ python", "quiz_prog"),
    "quiz_math": ("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞–ª–≥–µ–±—Ä–∞, –≥–µ–æ–º–µ—Ç—Ä–∏—è", "quiz_math"),
    "quiz_biology": ("–ë–∏–æ–ª–æ–≥–∏—è", "quiz_biology")
}


class QuizGame:
    def __init__(self, bot: Bot):
        '''–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç GPT –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏.'''
        self.bot = bot
        self.init_db()
        self._gpt_token = os.getenv('GPT_TOKEN')
        self._proxy = os.getenv('PROXY_GPT')
        self._client = self._create_client()

    def _create_client(self):
        '''–°–æ–∑–¥–∞—ë—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç OpenAI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ httpx'''
        gpt_client = openai.AsyncOpenAI(
            api_key=self._gpt_token,
            http_client=httpx.AsyncClient(
                proxy=self._proxy
            )
        )
        return gpt_client

    @staticmethod
    def init_db():
        """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É results, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç."""
        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS results (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    topic TEXT NOT NULL,
                    question TEXT NOT NULL,
                    user_answer TEXT,
                    correct_answer TEXT NOT NULL,
                    score INTEGER NOT NULL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            conn.commit()

    @staticmethod
    async def start_quiz(message: Message, user_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ —Ç–µ–º –∫–≤–∏–∑–∞ –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="quiz_prog")],
            [InlineKeyboardButton(text="üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="quiz_math")],
            [InlineKeyboardButton(text="üî¨ –ë–∏–æ–ª–æ–≥–∏—è", callback_data="quiz_biology")],
        ])

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∫–≤–∏–∑–∞:", reply_markup=keyboard)

    async def handle_quiz_choice(self, callback_query: CallbackQuery, state: FSMContext, topic_key: str):
        '''–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—É –∏–∑ callback_data.
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç GPT –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞'''
        await callback_query.answer()

        if topic_key == "quiz_more":
            data = await state.get_data()
            if not data or "topic" not in data:
                await callback_query.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É!")
                return
            topic_key = data["topic"]

        topic_desc = topic_key

        try:
            question, correct_answer = await self.generate_quiz(topic_desc)

            await state.update_data(
                topic=topic_key,
                question=question,
                correct_answer=correct_answer
            )

            await state.set_state(GPTStateRequests.quiz_game)

            photo = FSInputFile(IMAGE_PATH)
            await self.bot.send_photo(
                chat_id=callback_query.from_user.id,
                photo=photo,
                caption=f"‚ùì –í–æ–ø—Ä–æ—Å: {question}"
            )
        except Exception as e:
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {escape(str(e))}")

    async def generate_quiz(self, topic_desc):
        '''–°–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã.
        –í—ã–∑—ã–≤–∞–µ—Ç GPT-3.5-Turbo.
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç'''
        prompt = BASE_PROMPT + '\n–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:\n–í–æ–ø—Ä–æ—Å: ...\n–û—Ç–≤–µ—Ç: ...\n–û–¢–í–ï–ß–ê–ô –°–¢–†–û–ì–û –í –≠–¢–û–ú –§–û–†–ú–ê–¢–ï!' + f"\n–°–æ—Å—Ç–∞–≤—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ: {topic_desc}"

        print(f"[DEBUG] –ü—Ä–æ–º—Ç:\n{prompt}")

        try:
            response = await self._client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )

            content = response.choices[0].message.content.strip()
            print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç GPT:\n{content}")

            if not content:
                raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GPT")

            if '–í–æ–ø—Ä–æ—Å:' not in content or '–û—Ç–≤–µ—Ç:' not in content:
                print(f'prompt = {prompt}')
                print(f'content = {content}')
                await self.generate_quiz(topic_desc)

            lines = [line for line in content.split('\n') if line.strip()]
            question_line = next(line for line in lines if line.startswith("–í–æ–ø—Ä–æ—Å:"))
            answer_line = next(line for line in lines if line.startswith("–û—Ç–≤–µ—Ç:"))

            question = question_line.replace("–í–æ–ø—Ä–æ—Å:", "").strip()
            answer = answer_line.replace("–û—Ç–≤–µ—Ç:", "").strip()

            return question, answer

        except StopIteration as e:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GPT —Å–ª–µ–¥—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.")
        except Exception as e:
            import traceback
            print(traceback.format_exc())
            await self.generate_quiz(self, topic_desc)
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")

    async def evaluate_answer(self, message: Message, state: FSMContext):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º.
            –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.
            –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è: ¬´–ï—â–µ –≤–æ–ø—Ä–æ—Å¬ª, ¬´–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª –∏ —Ç.–¥.
            –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î."""
        print(f"[DEBUG] –¢–µ–∫—É—â–∏–π user_id: {message.from_user.id}")
        data = await state.get_data()
        correct_answer = data["correct_answer"].lower()
        user_answer = message.text.strip().lower()
        question = data["question"]
        topic = data["topic"]

        score = await self.evaluate_answer_with_gpt(correct_answer, user_answer, topic)

        if score == 10:
            feedback = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n–û—Ü–µ–Ω–∫–∞: {score}/10"
        else:
            feedback = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer.capitalize()}\n–û—Ü–µ–Ω–∫–∞: {score}/10"
            if score >= 6:
                feedback += "\n–•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ!"
            elif score >= 3:
                feedback += "\n–ë–ª–∏–∑–∫–æ, –Ω–æ –Ω–µ —Å–æ–≤—Å–µ–º."
            elif score == 0:
                feedback += "\n–ú–∏–º–æ."
            else:
                feedback += "\n–ü–æ—á—Ç–∏ –º–∏–º–æ."

        await message.answer(feedback, parse_mode=None)

        self.save_result_to_db(message.from_user.id, topic, question, user_answer, correct_answer, score)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÅ –ï—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="quiz_again"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="quiz_stats")
            ]
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        await state.update_data(question=None, correct_answer=None)

    async def evaluate_answer_with_gpt(self, correct_answer: str, user_answer: str, topic_desc: str) -> int:
        '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GPT –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ—Ç–≤–µ—Ç–µ.
            –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É (0‚Äì10).
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –∫–∞–∫ –æ—Ü–µ–Ω–∫—É.'''

        prompt = f"""
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ü–µ–Ω–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ —Å–º—ã—Å–ª—É.
    –û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10:
    - 10 ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω–æ
    - 5 ‚Äî —á–∞—Å—Ç–∏—á–Ω–æ –≤–µ—Ä–Ω–æ –∏–ª–∏ –æ–±—â–∏–π —Å–º—ã—Å–ª –µ—Å—Ç—å
    - 0 ‚Äî —Å–æ–≤—Å–µ–º –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–º–µ
    –ù–µ –ø–∏—à–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ.

    –¢–µ–º–∞: {topic_desc}
    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}
    –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answer}
    """

        try:
            response = await self._client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2,
                max_tokens=10
            )

            content = response.choices[0].message.content.strip()

            if content.isdigit():
                score = int(content)
            else:
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç GPT
                print(f"[WARNING] GPT –≤–µ—Ä–Ω—É–ª –Ω–µ—á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç: '{content}'")
                score = 0

            return max(0, min(10, score))

        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —á–µ—Ä–µ–∑ GPT: {e}")
            return 0

    def save_result_to_db(self, user_id, topic, question, user_answer, correct_answer, score):
        '''–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç:
            ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            –¢–µ–º—É.
            –í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç—ã.
            –û—Ü–µ–Ω–∫—É.'''

        print(f"[DEBUG] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"user_id: {user_id}")
        print(f"topic: {topic}")
        print(f"question: {question}")
        print(f"user_answer: {user_answer}")
        print(f"correct_answer: {correct_answer}")
        print(f"score: {score}")

        try:
            with sqlite3.connect(DB_NAME) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO results (user_id, topic, question, user_answer, correct_answer, score)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (user_id, topic, question, user_answer, correct_answer, score))
                conn.commit()
                print(f"[SUCCESS] –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î: {e}")

    def calculate_similarity(self, a, b):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫."""
        return difflib.SequenceMatcher(None, a, b).ratio()

    async def show_stats(self, user_id, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–º–∞–º.
        –î–µ–ª–∞–µ—Ç –≤—ã–±–æ—Ä–∫—É –∏–∑ –ë–î.
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª.
        –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º."""

        print(f"[DEBUG] –¢–µ–∫—É—â–∏–π user_id: {user_id}")

        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM results WHERE user_id=?", (user_id,))
            all_rows = cursor.fetchall()

            print(f"[DEBUG] –í—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è user_id={user_id}:", all_rows)

            cursor.execute("SELECT topic, score FROM results WHERE user_id=?", (user_id,))
            rows = cursor.fetchall()

        if not rows:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.")
            return

        stats = {}
        total_score = 0

        for topic, score in rows:
            if topic not in stats:
                stats[topic] = {"count": 0, "total_score": 0}
            stats[topic]["count"] += 1
            stats[topic]["total_score"] += score
            total_score += score

        total_questions = len(rows)
        average_score = round(total_score / total_questions, 2)

        output = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        output += f"üîπ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n"
        output += f"üîπ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {average_score}/10\n\n"
        output += "üîç –ü–æ —Ç–µ–º–∞–º:\n"

        for topic, data in stats.items():
            avg = round(data["total_score"] / data["count"], 2)
            output += f"‚Ä¢ {TOPICS[topic][0]}: {data['count']} –≤–æ–ø—Ä–æ—Å–æ–≤, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª ‚Äî {avg}/10\n"

        await message.answer(output)


def register_quiz_handlers(quiz_router, quiz_game: QuizGame):
    '''–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:'''

    @quiz_router.callback_query(F.data.in_(["quiz_prog", "quiz_math", "quiz_biology", "quiz_more"]))
    async def handle_quiz_callback(callback_query: CallbackQuery, state: FSMContext):
        '''–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ'''
        await quiz_game.handle_quiz_choice(callback_query, state, callback_query.data)

    @quiz_router.message(GPTStateRequests.quiz_game)
    async def process_answer(message: Message, state: FSMContext):
        '''–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
        await quiz_game.evaluate_answer(message, state)

    @quiz_router.callback_query(F.data == "quiz_again")
    async def handle_again(callback_query: CallbackQuery, state: FSMContext):
        '''–ï—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å'''
        await callback_query.answer()

        data = await state.get_data()
        topic = data.get("topic")  # –¢–µ–º–∞ –æ—Å—Ç–∞—ë—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –µ—ë –Ω–µ —É–¥–∞–ª–∏–ª–∏

        if not topic:
            await callback_query.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É.")
            return

        await quiz_game.handle_quiz_choice(callback_query, state, topic)

    @quiz_router.callback_query(F.data == "main_menu")
    async def handle_main_menu(callback_query: CallbackQuery, state: FSMContext):
        '''–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'''
        await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É

        await state.clear()

        photo = FSInputFile("resources/images/main.jpg")
        text_path = "resources/messages/main.txt"

        with open(text_path, "r", encoding="utf-8") as f:
            msg_text = f.read()
        buttons = ('/random', '/gpt', '/talk', '/quiz',)
        await callback_query.message.answer_photo(
            photo=photo,
            caption=msg_text,
            reply_markup=kb_replay(buttons)  # —Ç–≤–æ—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        )

    @quiz_router.callback_query(F.data == "quiz_stats")
    async def handle_quiz_stats(callback_query: CallbackQuery, state: FSMContext):
        '''–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'''
        await callback_query.answer()
        user_id = callback_query.from_user.id
        await quiz_game.show_stats(user_id, callback_query.message)
